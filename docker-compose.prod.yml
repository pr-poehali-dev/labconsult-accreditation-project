# Docker Compose конфигурация для production развертывания ЛабКонсалт
# Включает Nginx с SSL, автоматическое получение сертификатов, и мониторинг

version: '3.8'

services:
  # Основное приложение ЛабКонсалт
  app:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    container_name: labkonsalt-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    volumes:
      - ./dist:/app/dist:ro
    networks:
      - labkonsalt-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx с SSL
  nginx:
    image: nginx:1.25-alpine
    container_name: labkonsalt-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./dist:/var/www/html:ro
      - certbot-webroot:/var/www/certbot:ro
      - certbot-certs:/etc/letsencrypt:ro
    depends_on:
      - app
    networks:
      - labkonsalt-network
    command: /bin/sh -c "nginx -g 'daemon off;'"

  # Certbot для автоматического получения SSL сертификатов
  certbot:
    image: certbot/certbot:latest
    container_name: labkonsalt-certbot
    volumes:
      - certbot-webroot:/var/www/certbot
      - certbot-certs:/etc/letsencrypt
    command: sh -c "trap exit TERM; while :; do certbot renew --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN} -d www.${DOMAIN}; sleep 12h & wait $${!}; done;"
    depends_on:
      - nginx
    networks:
      - labkonsalt-network

  # Redis для кэширования и сессий
  redis:
    image: redis:7-alpine
    container_name: labkonsalt-redis
    restart: unless-stopped
    volumes:
      - redis-data:/data
    networks:
      - labkonsalt-network
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Мониторинг с Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: labkonsalt-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - labkonsalt-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana для визуализации метрик
  grafana:
    image: grafana/grafana:latest
    container_name: labkonsalt-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_ADMIN_USER=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - labkonsalt-network
    depends_on:
      - prometheus

volumes:
  certbot-webroot:
  certbot-certs:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  labkonsalt-network:
    driver: bridge